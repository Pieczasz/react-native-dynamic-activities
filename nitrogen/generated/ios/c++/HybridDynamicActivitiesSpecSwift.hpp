///
/// HybridDynamicActivitiesSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridDynamicActivitiesSpec.hpp"

// Forward declaration of `HybridDynamicActivitiesSpec_cxx` to properly resolve imports.
namespace DynamicActivities { class HybridDynamicActivitiesSpec_cxx; }

// Forward declaration of `LiveActivitiesSupportInfo` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivitiesSupportInfo; }
// Forward declaration of `LiveActivityStartResult` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivityStartResult; }
// Forward declaration of `LiveActivityAttributes` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivityAttributes; }
// Forward declaration of `LiveActivityContent` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivityContent; }
// Forward declaration of `LiveActivityState` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { enum class LiveActivityState; }
// Forward declaration of `LiveActivityPushToken` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivityPushToken; }
// Forward declaration of `LiveActivityStyle` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { enum class LiveActivityStyle; }
// Forward declaration of `LiveActivityAlertConfiguration` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { struct LiveActivityAlertConfiguration; }
// Forward declaration of `LiveActivityDismissalPolicy` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { enum class LiveActivityDismissalPolicy; }

#include "LiveActivitiesSupportInfo.hpp"
#include <NitroModules/Promise.hpp>
#include <string>
#include "LiveActivityStartResult.hpp"
#include <optional>
#include "LiveActivityAttributes.hpp"
#include "LiveActivityContent.hpp"
#include "LiveActivityState.hpp"
#include <chrono>
#include "LiveActivityPushToken.hpp"
#include "LiveActivityStyle.hpp"
#include "LiveActivityAlertConfiguration.hpp"
#include "LiveActivityDismissalPolicy.hpp"

#include "DynamicActivities-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::dynamicactivities {

  /**
   * The C++ part of HybridDynamicActivitiesSpec_cxx.swift.
   *
   * HybridDynamicActivitiesSpecSwift (C++) accesses HybridDynamicActivitiesSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridDynamicActivitiesSpec_cxx can directly inherit from the C++ class HybridDynamicActivitiesSpec
   * to simplify the whole structure and memory management.
   */
  class HybridDynamicActivitiesSpecSwift: public virtual HybridDynamicActivitiesSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridDynamicActivitiesSpecSwift(const DynamicActivities::HybridDynamicActivitiesSpec_cxx& swiftPart):
      HybridObject(HybridDynamicActivitiesSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline DynamicActivities::HybridDynamicActivitiesSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<LiveActivitiesSupportInfo>> areLiveActivitiesSupported() override {
      auto __result = _swiftPart.areLiveActivitiesSupported();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<LiveActivityStartResult>> startLiveActivity(const LiveActivityAttributes& attributes, const LiveActivityContent& content, const std::optional<LiveActivityPushToken>& pushToken, std::optional<LiveActivityStyle> style, const std::optional<LiveActivityAlertConfiguration>& alertConfiguration, std::optional<std::chrono::system_clock::time_point> start) override {
      auto __result = _swiftPart.startLiveActivity(attributes, content, pushToken, style, alertConfiguration, start);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> updateLiveActivity(const std::string& activityId, const LiveActivityContent& content, const std::optional<LiveActivityAlertConfiguration>& alertConfiguration, std::optional<std::chrono::system_clock::time_point> timestamp) override {
      auto __result = _swiftPart.updateLiveActivity(activityId, content, alertConfiguration, timestamp);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> endLiveActivity(const std::string& activityId, const LiveActivityContent& content, std::optional<LiveActivityDismissalPolicy> dismissalPolicy, std::optional<std::chrono::system_clock::time_point> timestamp, std::optional<std::chrono::system_clock::time_point> dismissalDate) override {
      auto __result = _swiftPart.endLiveActivity(activityId, content, dismissalPolicy, timestamp, dismissalDate);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    DynamicActivities::HybridDynamicActivitiesSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::dynamicactivities
