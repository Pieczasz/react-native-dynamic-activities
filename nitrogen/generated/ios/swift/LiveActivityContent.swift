///
/// LiveActivityContent.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `LiveActivityContent`, backed by a C++ struct.
 */
public typealias LiveActivityContent = margelo.nitro.dynamicactivities.LiveActivityContent

public extension LiveActivityContent {
  private typealias bridge = margelo.nitro.dynamicactivities.bridge.swift

  /**
   * Create a new instance of `LiveActivityContent`.
   */
  init(state: LiveActivityState, staleDate: Date?, relevanceScore: Double?) {
    self.init(state, { () -> bridge.std__optional_std__chrono__system_clock__time_point_ in
      if let __unwrappedValue = staleDate {
        return bridge.create_std__optional_std__chrono__system_clock__time_point_(__unwrappedValue.toCpp())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = relevanceScore {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var state: LiveActivityState {
    @inline(__always)
    get {
      return self.__state
    }
    @inline(__always)
    set {
      self.__state = newValue
    }
  }
  
  var staleDate: Date? {
    @inline(__always)
    get {
      return { () -> Date? in
        if bridge.has_value_std__optional_std__chrono__system_clock__time_point_(self.__staleDate) {
          let __unwrapped = bridge.get_std__optional_std__chrono__system_clock__time_point_(self.__staleDate)
          return Date(fromChrono: __unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__staleDate = { () -> bridge.std__optional_std__chrono__system_clock__time_point_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__chrono__system_clock__time_point_(__unwrappedValue.toCpp())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var relevanceScore: Double? {
    @inline(__always)
    get {
      return self.__relevanceScore.value
    }
    @inline(__always)
    set {
      self.__relevanceScore = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
