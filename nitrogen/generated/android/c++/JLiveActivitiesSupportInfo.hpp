///
/// JLiveActivitiesSupportInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LiveActivitiesSupportInfo.hpp"

#include <string>

namespace margelo::nitro::dynamicactivities {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "LiveActivitiesSupportInfo" and the the Kotlin data class "LiveActivitiesSupportInfo".
   */
  struct JLiveActivitiesSupportInfo final: public jni::JavaClass<JLiveActivitiesSupportInfo> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/dynamicactivities/LiveActivitiesSupportInfo;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct LiveActivitiesSupportInfo by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LiveActivitiesSupportInfo toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldSupported = clazz->getField<jboolean>("supported");
      jboolean supported = this->getFieldValue(fieldSupported);
      static const auto fieldVersion = clazz->getField<double>("version");
      double version = this->getFieldValue(fieldVersion);
      static const auto fieldComment = clazz->getField<jni::JString>("comment");
      jni::local_ref<jni::JString> comment = this->getFieldValue(fieldComment);
      return LiveActivitiesSupportInfo(
        static_cast<bool>(supported),
        version,
        comment->toStdString()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JLiveActivitiesSupportInfo::javaobject> fromCpp(const LiveActivitiesSupportInfo& value) {
      return newInstance(
        value.supported,
        value.version,
        jni::make_jstring(value.comment)
      );
    }
  };

} // namespace margelo::nitro::dynamicactivities
