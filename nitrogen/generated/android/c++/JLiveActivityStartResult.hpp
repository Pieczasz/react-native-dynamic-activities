///
/// JLiveActivityStartResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LiveActivityStartResult.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::dynamicactivities {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "LiveActivityStartResult" and the the Kotlin data class "LiveActivityStartResult".
   */
  struct JLiveActivityStartResult final: public jni::JavaClass<JLiveActivityStartResult> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/dynamicactivities/LiveActivityStartResult;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct LiveActivityStartResult by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LiveActivityStartResult toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldActivityId = clazz->getField<jni::JString>("activityId");
      jni::local_ref<jni::JString> activityId = this->getFieldValue(fieldActivityId);
      static const auto fieldPushToken = clazz->getField<jni::JString>("pushToken");
      jni::local_ref<jni::JString> pushToken = this->getFieldValue(fieldPushToken);
      return LiveActivityStartResult(
        activityId->toStdString(),
        pushToken != nullptr ? std::make_optional(pushToken->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JLiveActivityStartResult::javaobject> fromCpp(const LiveActivityStartResult& value) {
      return newInstance(
        jni::make_jstring(value.activityId),
        value.pushToken.has_value() ? jni::make_jstring(value.pushToken.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::dynamicactivities
