///
/// JLiveActivityState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LiveActivityState.hpp"

namespace margelo::nitro::dynamicactivities {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "LiveActivityState" and the the Kotlin enum "LiveActivityState".
   */
  struct JLiveActivityState final: public jni::JavaClass<JLiveActivityState> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/dynamicactivities/LiveActivityState;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum LiveActivityState.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LiveActivityState toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<LiveActivityState>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JLiveActivityState> fromCpp(LiveActivityState value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldACTIVE = clazz->getStaticField<JLiveActivityState>("ACTIVE");
      static const auto fieldDISMISSED = clazz->getStaticField<JLiveActivityState>("DISMISSED");
      static const auto fieldPENDING = clazz->getStaticField<JLiveActivityState>("PENDING");
      static const auto fieldSTALE = clazz->getStaticField<JLiveActivityState>("STALE");
      static const auto fieldENDED = clazz->getStaticField<JLiveActivityState>("ENDED");
      
      switch (value) {
        case LiveActivityState::ACTIVE:
          return clazz->getStaticFieldValue(fieldACTIVE);
        case LiveActivityState::DISMISSED:
          return clazz->getStaticFieldValue(fieldDISMISSED);
        case LiveActivityState::PENDING:
          return clazz->getStaticFieldValue(fieldPENDING);
        case LiveActivityState::STALE:
          return clazz->getStaticFieldValue(fieldSTALE);
        case LiveActivityState::ENDED:
          return clazz->getStaticFieldValue(fieldENDED);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::dynamicactivities
