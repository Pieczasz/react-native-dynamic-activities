///
/// HybridDynamicActivitiesSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridDynamicActivitiesSpec.hpp"




namespace margelo::nitro::dynamicactivities {

  using namespace facebook;

  class JHybridDynamicActivitiesSpec: public jni::HybridClass<JHybridDynamicActivitiesSpec, JHybridObject>,
                                      public virtual HybridDynamicActivitiesSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/dynamicactivities/HybridDynamicActivitiesSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridDynamicActivitiesSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridDynamicActivitiesSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridDynamicActivitiesSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridDynamicActivitiesSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<LiveActivitiesSupportInfo>> areLiveActivitiesSupported() override;
    std::shared_ptr<Promise<LiveActivityStartResult>> startLiveActivity(const LiveActivityAttributes& attributes, const LiveActivityContent& content, const std::optional<LiveActivityPushToken>& pushToken, std::optional<LiveActivityStyle> style, const std::optional<LiveActivityAlertConfiguration>& alertConfiguration, std::optional<std::chrono::system_clock::time_point> start) override;
    std::shared_ptr<Promise<void>> updateLiveActivity(const std::string& activityId, const LiveActivityContent& content, const std::optional<LiveActivityAlertConfiguration>& alertConfiguration, std::optional<std::chrono::system_clock::time_point> timestamp) override;
    std::shared_ptr<Promise<void>> endLiveActivity(const std::string& activityId, const LiveActivityContent& content, std::optional<LiveActivityDismissalPolicy> dismissalPolicy, std::optional<std::chrono::system_clock::time_point> timestamp, std::optional<std::chrono::system_clock::time_point> dismissalDate) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridDynamicActivitiesSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::dynamicactivities
