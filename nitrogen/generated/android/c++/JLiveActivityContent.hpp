///
/// JLiveActivityContent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LiveActivityContent.hpp"

#include "JLiveActivityState.hpp"
#include "LiveActivityState.hpp"
#include <NitroModules/JInstant.hpp>
#include <chrono>
#include <optional>

namespace margelo::nitro::dynamicactivities {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "LiveActivityContent" and the the Kotlin data class "LiveActivityContent".
   */
  struct JLiveActivityContent final: public jni::JavaClass<JLiveActivityContent> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/dynamicactivities/LiveActivityContent;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct LiveActivityContent by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LiveActivityContent toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldState = clazz->getField<JLiveActivityState>("state");
      jni::local_ref<JLiveActivityState> state = this->getFieldValue(fieldState);
      static const auto fieldStaleDate = clazz->getField<JInstant>("staleDate");
      jni::local_ref<JInstant> staleDate = this->getFieldValue(fieldStaleDate);
      static const auto fieldRelevanceScore = clazz->getField<jni::JDouble>("relevanceScore");
      jni::local_ref<jni::JDouble> relevanceScore = this->getFieldValue(fieldRelevanceScore);
      return LiveActivityContent(
        state->toCpp(),
        staleDate != nullptr ? std::make_optional(staleDate->toChrono()) : std::nullopt,
        relevanceScore != nullptr ? std::make_optional(relevanceScore->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JLiveActivityContent::javaobject> fromCpp(const LiveActivityContent& value) {
      return newInstance(
        JLiveActivityState::fromCpp(value.state),
        value.staleDate.has_value() ? JInstant::fromChrono(value.staleDate.value()) : nullptr,
        value.relevanceScore.has_value() ? jni::JDouble::valueOf(value.relevanceScore.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::dynamicactivities
