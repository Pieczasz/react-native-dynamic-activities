///
/// LiveActivityContent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `LiveActivityState` to properly resolve imports.
namespace margelo::nitro::dynamicactivities { enum class LiveActivityState; }

#include "LiveActivityState.hpp"
#include <chrono>
#include <optional>

namespace margelo::nitro::dynamicactivities {

  /**
   * A struct which can be represented as a JavaScript object (LiveActivityContent).
   */
  struct LiveActivityContent {
  public:
    LiveActivityState state     SWIFT_PRIVATE;
    std::optional<std::chrono::system_clock::time_point> staleDate     SWIFT_PRIVATE;
    std::optional<double> relevanceScore     SWIFT_PRIVATE;

  public:
    LiveActivityContent() = default;
    explicit LiveActivityContent(LiveActivityState state, std::optional<std::chrono::system_clock::time_point> staleDate, std::optional<double> relevanceScore): state(state), staleDate(staleDate), relevanceScore(relevanceScore) {}
  };

} // namespace margelo::nitro::dynamicactivities

namespace margelo::nitro {

  // C++ LiveActivityContent <> JS LiveActivityContent (object)
  template <>
  struct JSIConverter<margelo::nitro::dynamicactivities::LiveActivityContent> final {
    static inline margelo::nitro::dynamicactivities::LiveActivityContent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::dynamicactivities::LiveActivityContent(
        JSIConverter<margelo::nitro::dynamicactivities::LiveActivityState>::fromJSI(runtime, obj.getProperty(runtime, "state")),
        JSIConverter<std::optional<std::chrono::system_clock::time_point>>::fromJSI(runtime, obj.getProperty(runtime, "staleDate")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "relevanceScore"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::dynamicactivities::LiveActivityContent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "state", JSIConverter<margelo::nitro::dynamicactivities::LiveActivityState>::toJSI(runtime, arg.state));
      obj.setProperty(runtime, "staleDate", JSIConverter<std::optional<std::chrono::system_clock::time_point>>::toJSI(runtime, arg.staleDate));
      obj.setProperty(runtime, "relevanceScore", JSIConverter<std::optional<double>>::toJSI(runtime, arg.relevanceScore));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::dynamicactivities::LiveActivityState>::canConvert(runtime, obj.getProperty(runtime, "state"))) return false;
      if (!JSIConverter<std::optional<std::chrono::system_clock::time_point>>::canConvert(runtime, obj.getProperty(runtime, "staleDate"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "relevanceScore"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
